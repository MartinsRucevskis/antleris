grammar Pam;
progr 		:	series NEWLINE;
series		: 	stmt (';' stmt)*;
stmt		:	input_stmt | output_stmt | assign_stmt | cond_stmt | loop;
input_stmt	:	'read' varlist;
output_stmt	:	'write' varlist;
assign_stmt	:	VARNAME ':=' expr;
cond_stmt	:	'if' logical_strongest 'then' series ('else' series)?  'fi';
loop		:	'while' logical_strongest 'do' series 'end';
logical_weak:   ('NOT')* compar;
logical_strong : logical_weak( 'AND' logical_weak)*;
logical_strongest: logical_strong( 'OR' logical_strong)*;
compar		:	expr RELATION expr;
varlist		:	VARNAME (',' VARNAME)*;
expr		:	term (WEAKOP term)*;
term		:	elem (STRONGOP elem)*;
elem		:	NUMBER | VARNAME | '(' expr ')';
NEWLINE	:	'\r' ? '\n';
WEAKOP		:	'+' | '-';
STRONGOP	:	'*' | '/';
RELATION	:	'<>' | '=<' | '>='| '=' |  '<' | '>'  ;
NUMBER		:	[1-9][0-9]* | [0];
VARNAME	:	([a-z]|[A-Z]|'_') ([a-z]|[A-Z]|[0-9]|'_')*;
WS      		:       	[ \t\r\n]+ -> skip;
